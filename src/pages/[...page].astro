---
import type { QuoteFrontmatter } from "$lib/types";

import { getSlugFromFilePath } from "$lib/paths";

import dayjs from "dayjs";
import calendar from "dayjs/plugin/calendar";
dayjs.extend(calendar);
import { match } from "ts-pattern";
import Markdown from "@astrojs/markdown-component";

import Base from "$layouts/Base.astro";
import { sortQuotesDescendingByTime } from "$lib/sorting";

const formatDate = (date: string) => {
  const calendarDisplayOptions = {
    sameDay: "[Today at] h:mm A", // The same day ( Today at 2:30 AM )
    nextDay: "[Tomorrow at] h:mm A", // The next day ( Tomorrow at 2:30 AM )
    nextWeek: "dddd [at] h:mm A", // The next week ( Sunday at 2:30 AM )
    lastDay: "[Yesterday at] h:mm A", // The day before ( Yesterday at 2:30 AM )
    lastWeek: "[Last] dddd [at] h:mm A", // Last week ( Last Monday at 2:30 AM )
    sameElse: "DD.MM.YYYY", // Everything else ( 17/10/2011 )
  };
  return dayjs(date).calendar(null, calendarDisplayOptions);
};

const truncatedString = (string: string, length: number): string =>
  match(string)
    .when(
      (s) => s.length > length,
      (s) => `${s.substring(0, length)}...`
    )
    .otherwise((s) => s);

export async function getStaticPaths({ paginate }) {
  const quotes = await Astro.glob<QuoteFrontmatter>("../lib/quotes/**/*.md");
  const sortedQuotes = sortQuotesDescendingByTime(quotes);
  return paginate(sortedQuotes, { pageSize: 10 });
}

// All paginated data is passed on the "page" prop
const { page } = Astro.props;
---

<Base title="Quoke â€” a few quotations">
  {
    page.data.map((post) => {
      const { text, dateAdded } = post.frontmatter;

      return (
        <div class="quote">
          <div class="from-now">{formatDate(dateAdded)}</div>
          <div class="text">
            <a href={`/quote/${getSlugFromFilePath(post.file)}/`}>
              <Markdown>{truncatedString(text, 128)}</Markdown>
            </a>
          </div>
        </div>
      );
    })
  }

  {page.url.prev && <a href={page.url.prev}>Previous</a>}
  {page.url.prev && page.url.next && <span> - </span>}
  {page.url.next && <a href={page.url.next}>Next</a>}
</Base>

<style lang="scss">
  .quote {
    margin-bottom: 3em;
  }

  .from-now {
    font-size: 1em;
    color: #999;
    margin-bottom: 0.5em;
  }

  .text {
    font-size: 2em;
    line-height: 1.4em;

    a {
      color: inherit;
      text-decoration-style: dotted;
      text-decoration-color: #bbb;
      text-underline-offset: 0.1em;
      text-decoration-thickness: 1.4px;
    }

    p {
      margin-top: 0.25em;
    }
  }

  .divider {
    margin-top: 0.5em;
    margin-bottom: 0.5em;
    opacity: 0.2;
  }

  .author {
    // font-weight: bold;
  }

  .source {
    margin-top: 0.25em;
    opacity: 0.7;
  }
</style>
